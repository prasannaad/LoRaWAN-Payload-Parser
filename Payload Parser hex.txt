const ignore_vars = ['rf_chain', 'channel', 'modulation', 'app_id', 'dev_id', 'gtw_trusted', 'port', 'frequency', 'bandwidth', 'spreading_factor',
                    'code_rate', 'polarization_inversion', 'deviceName', 'adr', 'dr', 'fCnt', 'fPort', 'objectJSON', 'confirmedUplink', 'publishedAt',
                    'application_id', 'application_name', 'device_name', 'device_eui', 'dev_addr', 'object'];

// Remove unwanted variables.
payload = payload.filter(x => !ignore_vars.includes(x.variable));

// Search the payload variable in the payload global variable. It's contents is always [ { variable, value...}, {variable, value...} ...]
const payload_raw = payload.find(x => x.variable === 'payload_raw' || x.variable === 'payload' || x.variable === 'data');

if (payload_raw) {
  try {
    // Convert the data from Hex to Javascript Buffer.
    const buffer = Buffer.from(payload_raw.value, 'hex');

    // Lets say you have a payload of 5 bytes.
    // 0 - Protocol Version
    // 1,2 - Temperature
    // 3,4 - Humidity
    // More information about buffers can be found here: https://nodejs.org/api/buffer.html
    const data = [
      { variable: 'pm1',  value: buffer.readInt16BE(0), unit: 'ug/m3' },
      { variable: 'pm2',  value: buffer.readUInt16BE(2), unit: 'ug/m3' },
      { variable: 'pm10',  value: buffer.readUInt16BE(4), unit: 'ug/m3' }, 
      { variable: 'temperature',  value: buffer.readInt16BE(6) / 100, unit: 'Â°C' },
      { variable: 'humidity',  value: buffer.readUInt16BE(8) / 100, unit: '%' },
      { variable: 'battery',  value: buffer.readUInt16BE(10) / 100, unit: 'Volts' },
    ];

    // This will concat the content sent by your device with the content generated in this payload parser.
    // It also add the field "serie" and "time" to it, copying from your sensor data.
    payload = payload.concat(data.map(x => ({ ...x, serie: payload_raw.serie, time: payload_raw.time })));
  } catch (e) {
    // Print the error to the Live Inspector.
    console.error(e);

    // Return the variable parse_error for debugging.
    payload = [{ variable: 'parse_error', value: e.message }];
  }
}
